[package]
name = "epdx"
description = "EPDx is a library for parsing EPD files into a common exchange format."
version = "1.1.3"
authors = ["Christian Kongsgaard <christian@kongsgaard.eu>"]
edition = "2018"
readme = "README.md"
license-file = "LICENSE"
homepage = "https://epdx.kongsgaard.eu"
documentation = "https://epdx.kongsgaard.eu"
repository = "https://github.com/ocni-dtu/epdx"

[lib]
name = "epdx"
description = "EPDx is a library for parsing EPD files into a common exchange format."
crate-type = ["cdylib", "rlib"]

[[bin]]
name = "export-schema"
path = "src/schemars.rs"
test = false
bench = false


[features]
default = ["wee_alloc"]
pybindings = ["pyo3", "pyo3/extension-module"]
jsbindings = ["wasm-bindgen", "serde-wasm-bindgen", "console_error_panic_hook", "tsify"]

[dependencies]
chrono = { version = "0.4.31", features = ["serde"] }
wasm-bindgen = { version = "0.2.90", optional = true }
serde-wasm-bindgen = { version = "0.6", optional = true }
tsify = { version = "0.4.5", optional = true }
schemars = { version = "0.8.16", features = ["chrono"] }
serde = { version = "1.0.195", features = ["derive"] }
serde_json = "1.0.111"
pyo3 = { version = "0.20.2", features = ["abi3-py310"], optional = true }
pkg-version = "1.0.0"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }


[dev-dependencies]
wasm-bindgen-test = "0.3.40"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
